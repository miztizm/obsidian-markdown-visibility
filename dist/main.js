/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MarkdownVisibilityPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  enabled: true,
  showStatusBar: true,
  hideHeaders: true,
  hideBold: true,
  hideItalic: true,
  hideLinks: true,
  hideCode: true,
  hideQuotes: true,
  hideLists: true
};
var MarkdownVisibilityPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.styleEl = null;
    this.statusBarItem = null;
  }
  async onload() {
    await this.loadSettings();
    if (this.settings.showStatusBar) {
      this.createStatusBarItem();
    }
    this.addCommand({
      id: "toggle-markdown-visibility",
      name: "Toggle Markdown Visibility",
      callback: () => {
        this.toggleVisibility();
      }
    });
    this.addSettingTab(new MarkdownVisibilitySettingTab(this.app, this));
    if (this.settings.enabled) {
      this.applyStyles();
    }
  }
  onunload() {
    this.removeStyles();
    this.removeStatusBarItem();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  toggleVisibility() {
    this.settings.enabled = !this.settings.enabled;
    this.saveSettings();
    if (this.settings.enabled) {
      this.applyStyles();
    } else {
      this.removeStyles();
    }
    this.updateStatusBarItem();
  }
  createStatusBarItem() {
    if (this.statusBarItem) {
      return;
    }
    this.statusBarItem = this.addStatusBarItem();
    this.updateStatusBarItem();
    this.statusBarItem.addClass("mod-clickable");
    this.statusBarItem.addEventListener("click", () => {
      this.toggleVisibility();
    });
  }
  removeStatusBarItem() {
    if (this.statusBarItem) {
      this.statusBarItem.remove();
      this.statusBarItem = null;
    }
  }
  updateStatusBarItem() {
    if (this.statusBarItem) {
      const text = this.settings.enabled ? "\u{1F441}\uFE0F Markers Hidden" : "\u{1F441}\uFE0F Markers Visible";
      this.statusBarItem.setText(text);
    }
  }
  applyStyles() {
    this.removeStyles();
    this.styleEl = document.createElement("style");
    this.styleEl.id = "markdown-visibility-styles";
    this.styleEl.setAttribute("data-markdown-visibility", "active");
    let css = "";
    const multiLayerHideStyle = "font-size: 0 !important; width: 0 !important; height: 0 !important; display: inline !important; visibility: hidden !important; opacity: 0 !important;";
    const applyMultiLayerHiding = (selector) => {
      let rules = "";
      rules += `${selector} { ${multiLayerHideStyle} }
`;
      rules += `.cm-active ${selector} { ${multiLayerHideStyle} }
`;
      rules += `.cm-activeLine ${selector} { ${multiLayerHideStyle} }
`;
      rules += `.cm-line ${selector} { ${multiLayerHideStyle} }
`;
      rules += `.cm-line.cm-active ${selector} { ${multiLayerHideStyle} }
`;
      rules += `.cm-content ${selector} { ${multiLayerHideStyle} }
`;
      return rules;
    };
    if (this.settings.hideHeaders) {
      css += applyMultiLayerHiding(".cm-formatting-header");
    }
    if (this.settings.hideBold) {
      css += applyMultiLayerHiding(".cm-formatting-strong");
    }
    if (this.settings.hideItalic) {
      css += applyMultiLayerHiding(".cm-formatting-em");
    }
    if (this.settings.hideLinks) {
      css += applyMultiLayerHiding(".cm-formatting-link");
      css += applyMultiLayerHiding(".cm-formatting-link-string");
      css += applyMultiLayerHiding(".cm-url");
      css += applyMultiLayerHiding(".cm-hmd-internal-link .cm-underline");
    }
    if (this.settings.hideCode) {
      css += applyMultiLayerHiding(".cm-formatting-code");
      css += applyMultiLayerHiding(".cm-formatting-code-block");
      css += applyMultiLayerHiding(".HyperMD-codeblock-begin");
      css += applyMultiLayerHiding(".HyperMD-codeblock-end");
    }
    if (this.settings.hideQuotes) {
      css += applyMultiLayerHiding(".cm-formatting-quote");
    }
    if (this.settings.hideLists) {
      css += `.cm-formatting-list { color: transparent !important; }
`;
      css += `.cm-formatting-list-ul { color: transparent !important; }
`;
      css += `.cm-formatting-list-ol { color: transparent !important; }
`;
    }
    if (css.length > 0) {
      this.styleEl.textContent = css;
      document.head.appendChild(this.styleEl);
    } else {
      this.styleEl = null;
    }
  }
  removeStyles() {
    const existingStyle = document.getElementById("markdown-visibility-styles");
    if (existingStyle) {
      existingStyle.remove();
    }
    if (this.styleEl) {
      this.styleEl.remove();
      this.styleEl = null;
    }
    const stillExists = document.getElementById("markdown-visibility-styles");
    if (stillExists) {
      console.error("[Markdown Visibility] ERROR: Style element still exists after removal!");
    }
  }
  refreshStyles() {
    this.removeStyles();
    if (this.settings.enabled) {
      this.applyStyles();
    }
  }
};
var MarkdownVisibilitySettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Markdown Visibility Settings" });
    containerEl.createEl("h3", { text: "Interface Options" });
    new import_obsidian.Setting(containerEl).setName("Show status bar item").setDesc("Display plugin status in the bottom status bar (click to toggle)").addToggle((toggle) => toggle.setValue(this.plugin.settings.showStatusBar).onChange(async (value) => {
      this.plugin.settings.showStatusBar = value;
      await this.plugin.saveSettings();
      if (value) {
        this.plugin.createStatusBarItem();
      } else {
        this.plugin.removeStatusBarItem();
      }
    }));
    containerEl.createEl("h3", { text: "Granular Controls" });
    containerEl.createEl("p", {
      text: "Choose which types of Markdown markers to hide:",
      cls: "setting-item-description"
    });
    new import_obsidian.Setting(containerEl).setName("Hide header markers").setDesc("Hide # symbols for headers").addToggle((toggle) => toggle.setValue(this.plugin.settings.hideHeaders).onChange(async (value) => {
      this.plugin.settings.hideHeaders = value;
      await this.plugin.saveSettings();
      this.plugin.refreshStyles();
    }));
    new import_obsidian.Setting(containerEl).setName("Hide bold markers").setDesc("Hide ** symbols for bold text").addToggle((toggle) => toggle.setValue(this.plugin.settings.hideBold).onChange(async (value) => {
      this.plugin.settings.hideBold = value;
      await this.plugin.saveSettings();
      this.plugin.refreshStyles();
    }));
    new import_obsidian.Setting(containerEl).setName("Hide italic markers").setDesc("Hide * or _ symbols for italic text").addToggle((toggle) => toggle.setValue(this.plugin.settings.hideItalic).onChange(async (value) => {
      this.plugin.settings.hideItalic = value;
      await this.plugin.saveSettings();
      this.plugin.refreshStyles();
    }));
    new import_obsidian.Setting(containerEl).setName("Hide link markers").setDesc("Hide [] and () symbols for links").addToggle((toggle) => toggle.setValue(this.plugin.settings.hideLinks).onChange(async (value) => {
      this.plugin.settings.hideLinks = value;
      await this.plugin.saveSettings();
      this.plugin.refreshStyles();
    }));
    new import_obsidian.Setting(containerEl).setName("Hide code markers").setDesc("Hide ` symbols for inline code").addToggle((toggle) => toggle.setValue(this.plugin.settings.hideCode).onChange(async (value) => {
      this.plugin.settings.hideCode = value;
      await this.plugin.saveSettings();
      this.plugin.refreshStyles();
    }));
    new import_obsidian.Setting(containerEl).setName("Hide quote markers").setDesc("Hide > symbols for blockquotes").addToggle((toggle) => toggle.setValue(this.plugin.settings.hideQuotes).onChange(async (value) => {
      this.plugin.settings.hideQuotes = value;
      await this.plugin.saveSettings();
      this.plugin.refreshStyles();
    }));
    new import_obsidian.Setting(containerEl).setName("Hide list markers").setDesc("Hide -, *, +, and numbered list markers").addToggle((toggle) => toggle.setValue(this.plugin.settings.hideLists).onChange(async (value) => {
      this.plugin.settings.hideLists = value;
      await this.plugin.saveSettings();
      this.plugin.refreshStyles();
    }));
  }
};
